#include "main.h"
#include <stdio.h>
#include <stdlib.h>

/**
 * _isdigit - Checks if a character is a digit.
 * @c: The character to check.
 *
 * Return: If c is a digit, return 1. Otherwise, return 0.
 */
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	return (0);
}

/**
 * _strlen - Computes the length of a string.
 * @s: The string to compute the length of.
 *
 * Return: The length of the string.
 */
int _strlen(char *s)
{
	int len = 0;

	while (s[len] != '\0')
		len++;

	return (len);
}

/**
 * mul - Multiplies two positive numbers.
 * @num1: The first number to multiply.
 * @num2: The second number to multiply.
 *
 * Return: A pointer to the result of the multiplication.
 */
char *mul(char *num1, char *num2)
{
	int len1 = _strlen(num1);
	int len2 = _strlen(num2);
	int i, j, carry, prod;
	int *result;
	char *str;

	result = calloc(len1 + len2, sizeof(int));
	if (result == NULL)
		return (NULL);

	for (i = len1 - 1; i >= 0; i--)
	{
		carry = 0;
		for (j = len2 - 1; j >= 0; j--)
		{
			prod = (num1[i] - '0') * (num2[j] - '0') + carry + result[i + j + 1];
			carry = prod / 10;
			result[i + j + 1] = prod % 10;
		}
		result[i + j + 1] = carry;
	}

	while (*result == 0 && len1 + len2 > 1)
	{
		result++;
		len1--;
	}

	str = malloc(len1 + len2 + 1);
	if (str == NULL)
		return (NULL);

	for (i = 0; i < len1 + len2; i++)
		str[i] = result[i] + '0';

	str[i] = '\0';
	free(result - len1);

	return (str);
}

/**
 * main - Multiplies two positive numbers.
 * @argc: The number of arguments passed to the program.
 * @argv: An array of pointers to the arguments.
 *
 * Return: If successful, return 0. Otherwise, return 98.
 */
int main(int argc, char **argv)
{
	char *num1, *num2, *result;

	if (argc != 3)
	{
		printf("Error\n");
		return (98);
	}

	num1 = argv[1];
	num2 = argv[2];

	for (int i = 0; num1[i] != '\0'; i++)
	{
		if (!_isdigit(num1[i]))
		{
			printf("Error\n");
			return (98);
		}
	}

	for (int i = 0; num2[i] != '\0'; i++)
	{
		if (!_isdigit(num2[i]))
		{
			printf("Error\n");
			return (98);
		}
	}

	result = mul(num1, num2);
	if (result == NULL)
		return (98);

	printf("%s\n", result);
	free(result);

	return (0);
}
